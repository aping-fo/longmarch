package com.game.sdk.handler;

import com.game.sdk.annotation.Command;
import com.game.sdk.annotation.Handler;
import com.game.sdk.net.Cmd;
import com.game.sdk.net.Result;
import com.game.sdk.proto.*;
import com.game.service.*;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Created by lucky on 2018/10/11.
 */
@Handler
public class QuestHandler {

    @Autowired
    private QuestService questService;
    @Autowired
    private QuestBankService questBankService;
    @Autowired
    private MasterMatchService masterMatchService;
    @Autowired
    private ChickenQuestService chickenQuestService;

    @Command(cmd = Cmd.START_MATCH, description = "请求匹配")
    public Result starMatch(String openId, StartMatchReq req) throws Exception {
        Result result = questService.startMatch(openId, req);
        return result;
    }

    @Command(cmd = Cmd.END_MATCH, description = "退出匹配")
    public Result endMatch(String openId) throws Exception {
        Result result = questService.endMatch(openId);
        return result;
    }

    @Command(cmd = Cmd.GET_MATCH_RESULT, description = "获取匹配结果")
    public Result queryMatchResult(String openId) throws Exception {
        Result result = questService.queryMatchResult(openId);
        return result;
    }

    @Command(cmd = Cmd.GET_QUEST_BANK_CATEGORY, description = "请求题库类型")
    public Result getQuests(String openId) throws Exception {
        Result result = questBankService.getQuestCategorys(openId);
        return result;
    }

    @Command(cmd = Cmd.GET_QUEST_INDEX, description = "请求亮题")
    public Result getQuestContent(String openId) throws Exception {
        return questBankService.getQuestIndex(openId);
    }

    @Command(cmd = Cmd.ANSWER_QUEST, description = "请求答题")
    public Result answerQuestion(String openId, AnswerQuestionReq req) throws Exception {
        return questBankService.answerTheQuestion(openId, req.getAnswer(), false);
    }

    @Command(cmd = Cmd.ROBOT_ANSWER_QUEST, description = "机器人请求答题")
    public Result answerQuestionByRobot(String openId, AnswerQuestionReq req) throws Exception {
        return questBankService.answerTheQuestion(openId, req.getAnswer(), true);
    }

    @Command(cmd = Cmd.GET_ANSWER, description = "请求答案")
    public Result answerQuestion(String openId, GetAnswerReq req) throws Exception {
        return questBankService.getAnswer(openId, req.getCfgId());
    }

    @Command(cmd = Cmd.ROB_ANSWER, description = "抢答")
    public Result robAnswer(String openId) throws Exception {
        return questBankService.robAnswer(openId, false);
    }

    @Command(cmd = Cmd.ROBOT_ROB_ANSWER, description = "机器人抢答抢答")
    public Result robAnswerByRobot(String openId) throws Exception {
        return questBankService.robAnswer(openId, true);
    }

    @Command(cmd = Cmd.CHECK_ROB, description = "检查是否被抢答")
    public Result checkRob(String openId) throws Exception {
        return questBankService.checkRob(openId);
    }

    @Command(cmd = Cmd.GET_ROOM_RESULT, description = "获取答题信息")
    public Result getRoomAnswers(String openId) throws Exception {
        return questBankService.getRoomAnswers(openId);
    }

    @Command(cmd = Cmd.SUBMIT_RESULT, description = "提交结果")
    public Result sumbitResult(String openId, FightResultReq req) throws Exception {
        return questBankService.sumbitResult(openId, req);
    }

    @Command(cmd = Cmd.CREATE_ROOM, description = "创建房间")
    public Result createRoom(String openId) throws Exception {
        return questService.createRoom(openId);
    }

    @Command(cmd = Cmd.JOIN_ROOM, description = "加入房间")
    public Result joinRoom(String openId, JoinRoomReq req) throws Exception {
        return questService.joinRoom(openId, req.getRoomID());
    }

    @Command(cmd = Cmd.EXIT_ROOM, description = "退出房间")
    public Result exitRoom(String openId) throws Exception {
        return questService.exitRoom(openId);
    }

    @Command(cmd = Cmd.SIGN_UP, description = "报名参赛")
    public Result signup(String openId) throws Exception {
        return masterMatchService.signup(openId);
    }

    @Command(cmd = Cmd.CHICKEN_START_MATCH, description = "吃鸡模式开始匹配")
    public Result chickenStartMatch(String openId, ChickenCreateRoomReq req) throws Exception {
        return chickenQuestService.startMatch(openId, req.getMode());
    }

    @Command(cmd = Cmd.CHICKEN_END_MATCH, description = "吃鸡模式取消匹配")
    public Result chickenEndMatch(String openId) throws Exception {
        return chickenQuestService.endMatch(openId);
    }

    @Command(cmd = Cmd.CHICKEN_CREATE_ROOM, description = "吃鸡模式新建房间")
    public Result chickenCreateRoom(String openId, ChickenCreateRoomReq req) throws Exception {
        return chickenQuestService.createRoom(openId, req.getMode());
    }

    @Command(cmd = Cmd.CHICKEN_JOIN_ROOM, description = "吃鸡模式加入房间")
    public Result chickenJoinRoom(String openId, ChickenJoinRoomReq req) throws Exception {
        return chickenQuestService.joinRoom(openId, req.getRoomId());
    }

    @Command(cmd = Cmd.CHICKEN_GET_ROOM_STATUS, description = "吃鸡模式查询房间状态")
    public Result chickenGetRoomStatus(String openId) throws Exception {
        return chickenQuestService.getRoomStatus(openId);
    }

    @Command(cmd = Cmd.CHICKEN_EXIT_ROOM, description = "吃鸡模式退出房间")
    public Result chickenExitRoom(String openId) throws Exception {
        return chickenQuestService.exitRoom(openId);
    }

    @Command(cmd = Cmd.CHICKEN_GET_QUESTION, description = "请求题目")
    public Result chickenGetQuestion(String openId) throws Exception {
        return chickenQuestService.getQuestion(openId);
    }

    @Command(cmd = Cmd.CHICKEN_GET_PLAYING_SITUATION, description = "请求赛场动态（轮询)")
    public Result chickenGetPlayingSituation(String openId) throws Exception {
        return chickenQuestService.getPlayingSituation(openId);
    }

    @Command(cmd = Cmd.CHICKEN_SUBMIT_ANSWER, description = "提交答案")
    public Result chickenSubmitAnswer(String openId, ChickenSubmitAnswerReq req) throws Exception {
        return chickenQuestService.submitAnswer(openId, req);
    }

    @Command(cmd = Cmd.CHICKEN_GET_RESULT, description = "请求结果（答案）")
    public Result chickenGetResult(String openId) throws Exception {
        return chickenQuestService.chickenGetResult(openId);
    }
}
