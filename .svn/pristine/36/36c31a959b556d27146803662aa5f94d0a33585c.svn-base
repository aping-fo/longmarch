package com.game.service;

import com.game.dao.FamilyDAO;
import com.game.dao.LoginLogDAO;
import com.game.dao.PlayerDAO;
import com.game.data.LevelCfg;
import com.game.data.QuestionCfg;
import com.game.domain.family.Family;
import com.game.domain.family.FamilyMember;
import com.game.domain.player.Player;
import com.game.domain.quest.HistoryRace;
import com.game.sdk.http.HttpClient;
import com.game.sdk.net.Result;
import com.game.sdk.proto.*;
import com.game.sdk.proto.vo.FamilyRankVO;
import com.game.sdk.proto.vo.HistoryQuestionVO;
import com.game.sdk.proto.vo.PlayerRankVO;
import com.game.sdk.utils.ErrorCode;
import com.game.util.ConfigData;
import com.game.util.JsonUtils;
import com.game.util.TimeUtil;
import com.game.util.TimerService;
import com.google.common.cache.*;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.concurrent.TimeUnit;

@Service
public class PlayerService extends AbstractService {
    private static Logger logger = Logger.getLogger(PlayerService.class);
    public final String ROBOT_ID = "ROBOT_UUID_888";
    public static final int signScore = 80;//签到每天奖励
    private final static int MAX_SIZE = 8;
    private List<Player> m_rankPlayerList = null;
    private List<FamilyRankVO> familyRankVOs = Lists.newArrayList();

    @Autowired
    private TimerService timerService;
    @Autowired
    private PlayerDAO playerDAO;
    @Autowired
    private LoginLogDAO loginLogDAO;
    @Autowired
    private FamilyDAO familyDAO;

    //TODO 可以优化为停服时统一保存
    private final LoadingCache<String, Player> players = CacheBuilder.newBuilder()
            .expireAfterAccess(600, TimeUnit.SECONDS)
            .maximumSize(5000)
            .removalListener(new RemovalListener<String, Player>() {

                @Override
                public void onRemoval(RemovalNotification<String, Player> notification) {
                    playerDAO.saveOrUpdate(notification.getValue());
                }
            })
            .build(new CacheLoader<String, Player>() {
                @Override
                public Player load(String openId) throws Exception {
                    logger.info("Cache loaded for " + openId);
                    Player player = playerDAO.queryPlayer(openId);
                    if (player != null) {
//                        String historyQuestionStr = player.getHistoryQuestionsStr();
//                        if (historyQuestionStr != null && historyQuestionStr.length() > 0) {
//                            List<Integer> historyQuestions = JsonUtils.string2Object(historyQuestionStr, List.class);
//                            player.setHistoryQuestions(historyQuestions);
//                        }
                        String categoryStr = player.getHistoryCatergorysStr();
                        if (categoryStr != null && categoryStr.length() > 0) {
                            List<Integer> historyCatergory = JsonUtils.string2Object(categoryStr, List.class);
                            player.setHistoryCatergorys(historyCatergory);
                        }

                        String raceStr = player.getHistoryRaceStr();
                        if (raceStr != null && raceStr.length() > 0) {
                            List<HistoryRace> historyCatergory = JsonUtils.string2Object(raceStr, List.class);
                            player.setHistoryRaces(historyCatergory);
                        }
                    }

                    return player;
                }
            });

    /**
     * 家庭
     */
    private final LoadingCache<String, Family> familys = CacheBuilder.newBuilder()
            .expireAfterAccess(600, TimeUnit.SECONDS)
            .maximumSize(5000)
            .removalListener(new RemovalListener<String, Family>() {

                @Override
                public void onRemoval(RemovalNotification<String, Family> notification) {
                    familyDAO.saveOrUpdate(notification.getValue());
                }
            })
            .build(new CacheLoader<String, Family>() {
                @Override
                public Family load(String id) throws Exception {
                    logger.info("Cache loaded for " + id);
                    Family family = familyDAO.queryFamily(id);
                    if (family != null) {

                        String json = family.getMemberJson();
                        if (json != null && json.length() > 0) {
                            Map<String, FamilyMember> historyCatergory = JsonUtils.string2Map(json, String.class, FamilyMember.class);
                            family.getMembers().putAll(historyCatergory);
                        }
                    }
                    return family;
                }
            });


    @Override
    public void onStart() {
        //5分钟定时
        timerService.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                try {
                    schedule();
                } catch (Exception e) {
                    logger.error("match schedule error", e);
                }
            }
        }, 0, 5, TimeUnit.MINUTES);
    }

    /**
     * 获取玩家信息
     *
     * @param openId
     * @return
     */
    public Player getPlayer(String openId) {
        try {
            return players.get(openId);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * 获取玩家信息
     *
     * @param openId
     * @return
     */
    public Family getFamily(String openId) {
        try {
            return familys.get(openId);
        } catch (Exception e) {
            //ignore
            return null;
        }
    }

    /**
     * 创建角色
     *
     * @param openId
     * @param nickName
     */
    public Result createPlayer(String openId, String nickName, String iconUrl) {
        Player player = new Player();
        player.setNickName(nickName);
        player.setOpenId(openId);
        player.setLevel(1);
        player.setTotalQuestions(0);
        player.setAnswerSuccess(0);
        player.setScore(0);
        player.setTotalScore(0);
        player.setHistoryCatergorysStr("");
        player.setIconUrl(iconUrl);
        player.setCreateTime(System.currentTimeMillis());
        player.setLoginTime(System.currentTimeMillis());
        playerDAO.insert(player);
        players.put(openId, player);

        return Result.valueOf(ErrorCode.OK, "ok");
    }

    /**
     * 获取OPENID
     *
     * @param openId
     * @param code
     * @return
     * @throws Exception
     */
    public Result getOpenID(String openId, String code) throws Exception {
        String errorCode = ErrorCode.OK;
        OpenIDResp resp = new OpenIDResp();
        if (!"".equals(code))//测试模式
        {
            String url = "https://api.weixin.qq.com/sns/jscode2session?appid=wxb00112803f6343cc&secret=cef5c8335e35c10e503528a850087377&grant_type=authorization_code&js_code=" + code;
            String json = HttpClient.sendGetRequest(url);
            Map<String, Object> result = JsonUtils.string2Map(json);
            openId = (String) result.get("openid");
        }

        try {
            players.get(openId);
            resp.setHasRole(true);
        } catch (Exception e) {
            resp.setHasRole(false);
        }
        resp.setOpenId(openId);
        return Result.valueOf(errorCode, resp);
    }

    /**
     * 创建角色
     *
     * @param openId
     */
    public Result getRole(String openId) {
        String code = ErrorCode.OK;
        Map<String, Object> resp = Maps.newHashMap();
        Player player = players.getUnchecked(openId);
        if (player == null) {
            code = ErrorCode.ROLE_NOT_EXIST;
        } else {
            resp.put("openId", player.getOpenId());
            resp.put("level", player.getLevel());
            resp.put("score", player.getScore());
            resp.put("nickName", player.getNickName());
            resp.put("totalQuestions", player.getTotalQuestions());
            resp.put("answerSuccess", player.getAnswerSuccess());

            LevelCfg cfg = ConfigData.getConfig(LevelCfg.class, player.getLevel());
            if (cfg != null) {
                resp.put("levelUpExp", cfg.levelUpScore);
            } else {
                resp.put("levelUpExp", 0);
            }

            Instant instant1 = Instant.ofEpochMilli(player.getLoginTime());
            LocalDateTime localDateTime1 = LocalDateTime.ofInstant(instant1, ZoneId.systemDefault());
            Instant instant2 = Instant.ofEpochMilli(System.currentTimeMillis());
            LocalDateTime localDateTime2 = LocalDateTime.ofInstant(instant2, ZoneId.systemDefault());
            if (!localDateTime1.toLocalDate().isEqual(localDateTime2.toLocalDate())) { //每日重置
                loginLogDAO.insert(player.getOpenId(), new Date());
            }

            player.setLoginTime(System.currentTimeMillis());
            playerDAO.saveOrUpdate(player);
        }

        return Result.valueOf(code, resp);
    }


    /**
     * 答题结果，奖励
     *
     * @param openId
     */
    public void answerResult(String openId, boolean victory) {
        Player player = players.getUnchecked(openId);
        LevelCfg cfg = ConfigData.getConfig(LevelCfg.class, player.getLevel());
        if (cfg == null) {
            return;
        }
        int exp = victory ? cfg.rightScore : cfg.wrongScore;
        checkForLevelup(openId, exp);
    }

    /**
     * 每局胜利奖励
     *
     * @param openId
     * @param deltaScore
     * @return
     */
    public int roundResult(String openId, int deltaScore, int deltaExp) {
        Player player = players.getUnchecked(openId);
        Family family = getFamily(player.getFamilyId());

        player.setLastGameScoreChange(deltaScore);

        int newScore = 0;
        if (family != null) {
            family.setScore(Math.max(family.getScore() + deltaScore, 0));
            family.setTotalScore(Math.max(family.getTotalScore() + deltaScore, 0));

            familyDAO.saveOrUpdate(family);
            updatePlayerScoreInFamily(family);
        }else{
            player.setScore(Math.max(player.getScore() + deltaScore, 0));
            player.setTotalScore(Math.max(player.getTotalScore() + deltaScore, 0));
        }

        checkForLevelup(openId, deltaExp);


        return newScore;
    }

    /**
     * 获取玩家历史答题
     */
    public Result getHistoryQuestions(String openId) {
        HistoryQuestionResp resp = new HistoryQuestionResp();
        Player player = players.getUnchecked(openId);
        List<Integer> historyQuests = player.getHistoryQuestions();

        for (Integer questId : historyQuests) {
            QuestionCfg cfg = ConfigData.getConfig(QuestionCfg.class, questId);
            if (cfg != null) {
                HistoryQuestionVO vo = new HistoryQuestionVO();

                vo.setContent(cfg.content);
                vo.setAnswer(cfg.options[cfg.answerIndex]);
                vo.setExplain(cfg.explain);

                resp.getQuestions().add(vo);
            }
        }

        return Result.valueOf(ErrorCode.OK, resp);
    }

    /**
     * 获取排行榜信息
     */
    public Result getRankInfo(String openId, RankInfoReq req) {
//        Player mePlayer = playerDAO.queryPlayer(openId);

        RankResp resp = new RankResp();
        //todo  自己的排位
        resp.setSelfRank(10);

        if (req.getFromIndex() >= m_rankPlayerList.size()) {
            return Result.valueOf(ErrorCode.OK, resp);
        }

        int toIndex = req.getToIndex();
        if (toIndex >= m_rankPlayerList.size()) {
            toIndex = m_rankPlayerList.size() - 1;
        }

        List<Player> players = m_rankPlayerList.subList(req.getFromIndex(), toIndex);
        for (Player player : players) {
            PlayerRankVO vo = new PlayerRankVO();

            vo.setOpenId((player.getOpenId()));
            vo.setNickName(player.getNickName());
            vo.setAvatarUrl("");
            vo.setScore(player.getTotalScore());

            resp.getRankVOList().add(vo);
        }

        return Result.valueOf(ErrorCode.OK, resp);
    }

    private void schedule() {
        logger.warn("rank .....");
        List<Player> players = playerDAO.queryPlayerRank();

        m_rankPlayerList = players;

        List<Family> families = familyDAO.queryFamilyRank();
        familyRankVOs.clear();
        for (Family family : families) {
            FamilyRankVO vo = new FamilyRankVO();
            vo.setId(family.getId());
            vo.setName(family.getName());
            vo.setScore(family.getTotalScore());

            familyRankVOs.add(vo);
        }
//        int count = playerDAO.selectPlayerCount();
    }

    /**
     * 更新角色信息
     *
     * @param openId
     */
    public Result updateRole(String openId, String nick, String iconUrl) {
        Player player = players.getUnchecked(openId);
        if (nick != null && nick.length() > 0) {
            player.setNickName(nick);
        }
        if (iconUrl != null && iconUrl.length() > 0) {
            player.setIconUrl(iconUrl);
        }
        return Result.valueOf(ErrorCode.OK, "ok");
    }

    public Result getFamilyGroupInfo(String openId) {
        FamilyGroupInfoResp resp = new FamilyGroupInfoResp();
        Player player = players.getUnchecked(openId);
        if (player.getFamilyId() == null || "".equals(player.getFamilyId())) {
            return Result.valueOf(ErrorCode.OK, resp);
        }

        Family family = familys.getUnchecked(player.getFamilyId());
        resp.setInfo(family.toProto());
        return Result.valueOf(ErrorCode.OK, resp);
    }

    public Result createFamilyGroup(String openId, String groupName) {
        FamilyGroupInfoResp resp = new FamilyGroupInfoResp();

        Player player = players.getUnchecked(openId);

        if (player.getFamilyId() != null && !"".equals(player.getFamilyId())) {
            //表示已经有组 不能创建
            return Result.valueOf(ErrorCode.FAMILYGROUP_EXIST, "error");
        }

        String familyGroupId = UUID.randomUUID().toString();
        player.setFamilyId(familyGroupId);
        Family family = new Family();
        family.setId(familyGroupId);
        family.setOwnerId(openId);
        family.setName(groupName);

        FamilyMember member = createMember(player);
        family.add(member, player.getScore());
        familys.put(family.getId(), family);
        resp.setInfo(family.toProto());

        playerDAO.saveOrUpdate(player);
        familyDAO.saveOrUpdate(family);

        return Result.valueOf(ErrorCode.OK, resp);
    }

    private FamilyMember createMember(Player player) {
        FamilyMember member = new FamilyMember();
        member.setIconUrl(player.getIconUrl());
        member.setLevel(player.getLevel());
        member.setName(player.getNickName());
        member.setOpenid(player.getOpenId());

        return member;
    }

    public Result familyGroupMemberAdd(String openId, String id) {
        FamilyGroupInfoResp resp = new FamilyGroupInfoResp();
        Player player = players.getUnchecked(openId);

        if (!StringUtils.isEmpty(player.getFamilyId())) {
            //表示已经有群 不能创建
            return Result.valueOf(ErrorCode.FAMILYGROUP_EXIST, "error");
        }

        Family family = getFamily(id);
        if (family == null) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }

        if (family.getMembers().size() > MAX_SIZE) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_MAX_SIZE, "error");
        }

        FamilyMember member = createMember(player);
        family.add(member, player.getScore());

        player.setFamilyId(id);

        updatePlayerScoreInFamily(family);
        familyDAO.saveOrUpdate(family);

        resp.setInfo(family.toProto());

        return Result.valueOf(ErrorCode.OK, resp);
    }

    public Result familyGroupMemberRemove(String openId, String memberOpenId) {
        FamilyGroupInfoResp resp = new FamilyGroupInfoResp();
        Player player = players.getUnchecked(openId);

        if (StringUtils.isEmpty(player.getFamilyId())) {
            //没有群，不能移除成员
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }
        Family family = getFamily(player.getFamilyId());
        if (family == null) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }
        if (!family.getOwnerId().equals(openId)) {
            //不是群主
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_CREATOR, "error");
        }
        family.remove(memberOpenId);
        Player memberPlayer = players.getUnchecked(memberOpenId);
        memberPlayer.setFamilyId("");

        updatePlayerScoreInFamily(family);
        familyDAO.saveOrUpdate(family);

        resp.setInfo(family.toProto());

        return Result.valueOf(ErrorCode.OK, resp);
    }

    /**
     * 成员退出
     *
     * @param openId
     * @return
     */
    public Result familyMemberExit(String openId) {
        Player player = players.getUnchecked(openId);

        if (StringUtils.isEmpty(player.getFamilyId())) {
            //没有群，不能退出
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }
        Family family = getFamily(player.getFamilyId());
        if (family == null) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }

        family.remove(openId);
        player.setFamilyId("");

        updatePlayerScoreInFamily(family);
        familyDAO.saveOrUpdate(family);

        return Result.valueOf(ErrorCode.OK, "");
    }

    public Result dismissFamilyGroup(String openId) {
        Player player = players.getUnchecked(openId);
        if (StringUtils.isEmpty(player.getFamilyId())) {
            //没有群，不能解散
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }

        Family family = getFamily(player.getFamilyId());
        if (family == null) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }
        int scorePerMember = family.getScorePerMember();
        int totalScorePerMember = family.getTotalScorePerMember();

        for (String id : family.getMembers().keySet()) {
            Player p = getPlayer(id);
            p.setFamilyId("");
            p.setScore(scorePerMember);
            p.setTotalScore(totalScorePerMember);

            playerDAO.saveOrUpdate(p);
        }

        familys.invalidate(family.getId());
        familyDAO.deleteFamily(family.getId());
        return Result.valueOf(ErrorCode.OK, "");
    }

    public Result familyGroupChangeName(String openId, String name) {
        FamilyGroupInfoResp resp = new FamilyGroupInfoResp();
        Player player = players.getUnchecked(openId);

        Family family = getFamily(player.getFamilyId());
        if (family == null) {
            //加群不存在
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }

        family.setName(name);
        resp.setInfo(family.toProto());
        familyDAO.saveOrUpdate(family);
        return Result.valueOf(ErrorCode.OK, resp);
    }

    public Result invitationJoinFamilyGroup(String openId, String memberId) {
        Player player = players.getUnchecked(openId);
        if (!StringUtils.isEmpty(player.getFamilyId())) {
            return Result.valueOf(ErrorCode.FAMILYGROUP_EXIST, "error");
        }

        Family family = getFamily(player.getFamilyId());
        if (family == null) {
            return Result.valueOf(ErrorCode.FAMILYGROUP_NOT_EXIST, "error");
        }
        Player memberPlayer = players.getUnchecked(memberId);
        memberPlayer.addInvitation(family.getId());
        playerDAO.saveOrUpdate(memberPlayer);
        return Result.valueOf(ErrorCode.OK, "");
    }

    public Result getFamilyRank(String openid) {
        Map<String, Object> resp = new HashMap<>();
        resp.put("result", familyRankVOs);
        return Result.valueOf(ErrorCode.OK, resp);
    }

    public Result sign(String openId) {
        Player player = getPlayer(openId);
        long signTime=player.getSignTime();
        long today=TimeUtil.getTodayBeginTime();
        if(TimeUtil.isSameDate(today,signTime))
        {
            return Result.valueOf(ErrorCode.REPEAT_CHECK_IN, "error");
        }
        Family family = getFamily(player.getFamilyId());
        int newScore = 0;
        if (family != null) {
            newScore = Math.max(family.getScore() + signScore, 0);
            family.setScore(newScore);
            family.setTotalScore(family.getTotalScore() + signScore);

            familyDAO.saveOrUpdate(family);
            updatePlayerScoreInFamily(family);
        }else{
            newScore = Math.max(player.getScore() + signScore, 0);
            player.setScore(newScore);
            player.setTotalScore(player.getTotalScore() + signScore);
        }
        player.setSignTime(today);
        playerDAO.saveOrUpdate(player);
        return Result.valueOf(ErrorCode.OK, newScore);
    }


    /**
     * 设置家庭分数后同步家庭成员积分
     * @param family
     */
    public void updatePlayerScoreInFamily(Family family){
        for(FamilyMember member : family.getMembers().values()){
            Player player = players.getUnchecked(member.getOpenid());
            player.setScore(family.getScore());
            player.setTotalScore(family.getTotalScore());

            playerDAO.saveOrUpdate(player);
        }
    }
    /**
     * 增加经验
     *
     * @param openId
     */
    private void checkForLevelup(String openId, int deltaExp) {
        Player player = players.getUnchecked(openId);
        LevelCfg cfg = ConfigData.getConfig(LevelCfg.class, player.getLevel());
        if (cfg != null) {
            int deltLevel = 0;
            while (deltaExp > 0) {
                int nextLevel = player.getLevel() + 1;
                cfg = ConfigData.getConfig(LevelCfg.class, nextLevel);

                if (cfg == null) {
                    return;
                }
                if (deltaExp < cfg.levelUpScore) {
                    break;
                }

                deltaExp -= cfg.levelUpScore;
                deltLevel += 1;
            }
            player.setLevel(player.getLevel() + deltLevel);
        }

        playerDAO.saveOrUpdate(player);
    }
}
